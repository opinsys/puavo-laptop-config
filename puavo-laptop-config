#!/usr/bin/ruby1.9.1

# puavo-laptop-config configures system according to admin user preferences.
# See puavo-laptop-config-ui for the user interface.  puavo-laptop-config
# reads a configuration file ("/etc/puavo/local.json" by default) that
# contains user preferences, and applies those to the system depending on
# given option arguments.  Run "puavo-laptop-config --help" for information
# on command arguments.  All wanted functionality must be explicitly requested
# with command arguments.

require 'getoptlong'
require 'json'

def configure_admins(conf)
  # we could also use a new, specific group for this?

  File.open('/etc/group', 'r') do |f|
    output_lines = []

    have_match = false

    f.flock(File::LOCK_EX);
    input_lines = f.read.split("\n")
    input_lines.each do |line|
      match = line.match(/^sudo:(.*):(.*)$/)
      if match then
        have_match = true
        output_lines.push("sudo:#{ match[1] }:#{ conf['admins'].join(',') }")
      else
        output_lines.push(line)
      end
    end

    output = output_lines.map { |s| "#{ s }\n" }.join

    if have_match then
      File.open('/etc/group.plctmp', 'w') { |f| f.write(output) }
      File.rename('/etc/group.plctmp', '/etc/group')
    end
  end
end

def configure_local_users(conf)
  raise 'XXX'
end

def configure_login_permissions(conf)
  raise 'XXX'
end

def configure_persistent_overlay(conf)
  raise 'XXX'
end

def install_software(conf, license_list)
  raise 'XXX'
end

config_path = '/etc/puavo/local.json'

opts = GetoptLong.new(
  [ '--config-path',           '-c', GetoptLong::REQUIRED_ARGUMENT, ],
  [ '--help',                  '-h', GetoptLong::NO_ARGUMENT,       ],

  [ '--admins',                      GetoptLong::NO_ARGUMENT,       ],
  [ '--local-users',                 GetoptLong::NO_ARGUMENT,       ],
  [ '--login-permissions',           GetoptLong::NO_ARGUMENT,       ],
  [ '--persistent-overlay',          GetoptLong::NO_ARGUMENT,       ],
  [ '--software-installation',       GetoptLong::REQUIRED_ARGUMENT, ],
)

apply_configs = []
license_list = []

opts.each do |opt, arg|
  case opt
    when '--config-path'
      config_path = arg
    when '--help'
      puts <<-EOF
puavo-laptop-config [OPTIONS]

-c, --config-path          set configuration file path
-h, --help                 show help

    --admins               configure admins
    --local-users          configure local users
    --login-permissions    configure login permissions
    --persistent-overlay   configure persistent image overlay

    --software-installation ["all" | a list of licenses separated with comma]
        EOF
      exit(0)
    when '--admins',
         '--local-users',
         '--login-permissions',
         '--persistent-overlay'
      apply_configs.push(opt)
    when '--software-installation'
      apply_configs.push(opt)
      license_list = arg.split(',')
  end
end

begin
  conf = JSON.parse( IO.read(config_path) )
rescue Exception => e
  warn "Could not read and interpret #{ config_path }: #{ e.message }"
  exit(1)
end

dispatch_table = {
  '--admins'                => lambda { configure_admins(conf)               },
  '--local-users'           => lambda { configure_local_users(conf)          },
  '--login-permissions'     => lambda { configure_login_permissions(conf)    },
  '--persistent-overlay'    => lambda { configure_persistent_overlay(conf)   },
  '--software-installation' => lambda { install_software(conf, license_list) },
}

exit_code = 0

apply_configs.each do |part|
  begin
    dispatch_table[part].call()
  rescue Exception => e
    warn "Could not handle #{ part }: #{ e.message }"
    exit_code = 1
  end
end

exit(exit_code)
